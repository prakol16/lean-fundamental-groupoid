import category_theory.category.Groupoid
import category_theory.groupoid
import topology.category.Top.basic
import topology.homotopy.basic
import topology.homotopy.fundamental_groupoid
import topology.constructions
import category_theory.functor
import groupoid_products
import path_homotopy_products
import path_homotopy_binary_products

noncomputable theory

/-
 - Given a family of topological spaces `X` indexed by `I`,
   we show that œÄ (Œ†·µ¢ X·µ¢) = Œ†·µ¢ (œÄ X·µ¢)
 - This isomorphism is given by two homomorphisms (note that
    homomorphisms between groupoids are functors):
    - `pi_prod_X_to_prod_pi_X` which is a map œÄ (Œ†·µ¢ X·µ¢) ‚•§ Œ†·µ¢ (œÄ X·µ¢)
    - `prod_pi_X_to_pi_prod_X` which is a map Œ†·µ¢ (œÄ X·µ¢) ‚•§ œÄ (Œ†·µ¢ X·µ¢)
 - We prove the theorems `iso‚ÇÅ` and `iso‚ÇÇ` which show that these
   really are inverses of each others.
 -/

namespace category_theory.functor
section
open category_theory

universes w v u

@[simps]
def pi' {I : Type w} {X : I ‚Üí Type u} [‚àÄi : I, category.{v} (X i)]
        {A : Type u} [category.{v} A] (f : Œ† i, A ‚•§ X i) :
        A ‚•§ Œ† i, X i := 
{ obj := Œª a i, (f i).obj a,
  map := Œª a‚ÇÅ a‚ÇÇ h i, (f i).map h, }

@[simps]
def diag {I : Type w} {A : Type u} [category.{v} A] : A ‚•§ (Œ† i : I, A) := pi' (Œª i, ùü≠ A)

lemma pi'_diag_pi 
        {I : Type w} {X : I ‚Üí Type u} [‚àÄi : I, category.{v} (X i)]
        {A : Type u} [category.{v} A] {f : Œ† i, A ‚•§ X i} :
        pi' f = diag ‚ãô functor.pi f := by obviously

end
section
open category_theory
universes u‚ÇÅ u‚ÇÇ u‚ÇÉ v‚ÇÅ v‚ÇÇ v‚ÇÉ
variables {A : Type u‚ÇÅ} [category.{v‚ÇÅ} A]
          {B : Type u‚ÇÇ} [category.{v‚ÇÇ} B]
          {C : Type u‚ÇÉ} [category.{v‚ÇÉ} C]

@[simps]
def prod' (F : A ‚•§ B) (G : A ‚•§ C) : A ‚•§ B √ó C := 
{ obj := Œª a, (F.obj a, G.obj a),
  map := Œª x y f, (F.map f, G.map f),
  }

end

end category_theory.functor


section
universe u
abbreviation œÄ := fundamental_groupoid.fundamental_groupoid_functor

parameters {I : Type u} (X : I ‚Üí Top.{u})

def pi_prod_X_to_prod_pi_X_i (i : I) : (œÄ.obj (Top.of (Œ† i, X i))).Œ± 
  ‚•§ (œÄ.obj (X i)).Œ± :=
  œÄ.map (to_bundled (continuous_apply i))

def pi_prod_X_to_prod_pi_X : (œÄ.obj (Top.of (Œ† i, X i))).Œ± 
  ‚•§ Œ† i, (œÄ.obj (X i)).Œ± := (category_theory.functor.pi' pi_prod_X_to_prod_pi_X_i)

def prod_pi_X_to_pi_prod_X : (Œ† i : I, (œÄ.obj (X i)).Œ±)
        ‚•§ (œÄ.obj (Top.of (Œ† i, X i))).Œ± := 
{ obj := Œª g, g,
  map := Œª v‚ÇÅ v‚ÇÇ p, path.homotopic.path_prod.quotient p,
  map_id' := path.homotopic.id_product_is_id.quotient,
  map_comp' := Œª x y z f g, (path.homotopic.hompath_trans_commutes_with_product f g).symm }

@[simp]
lemma def_pi_prod_X_to_prod_pi_X {x y : (œÄ.obj (Top.of (Œ† i, X i))).Œ±} {f : x ‚ü∂ y} 
  : pi_prod_X_to_prod_pi_X.map f = Œª i : I, path.homotopic.path_proj.quotient i f := rfl

@[simp]
lemma def_prod_pi_X_to_pi_prod_X {x y : Œ† i : I, (œÄ.obj (X i)).Œ±}
           {f : x ‚ü∂ y} : prod_pi_X_to_pi_prod_X.map f = path.homotopic.path_prod.quotient f := rfl 

theorem iso‚ÇÅ : pi_prod_X_to_prod_pi_X ‚ãô prod_pi_X_to_pi_prod_X = ùü≠ _ :=
begin
  apply category_theory.functor.ext; intros,
  { simp, }, { refl, },
end

theorem iso‚ÇÇ : prod_pi_X_to_pi_prod_X ‚ãô pi_prod_X_to_prod_pi_X = ùü≠ _ :=
begin
  apply category_theory.functor.ext; intros,
  { simp, }, { refl, },
end

section
parameters {Œ± Œ≤ : Top.{u}}

def pi_proj_left : (œÄ.obj (Top.of (Œ± √ó Œ≤))).Œ± ‚•§ (œÄ.obj Œ±).Œ± :=
  œÄ.map (‚ü®_, continuous_fst‚ü©)

def pi_proj_right : (œÄ.obj (Top.of (Œ± √ó Œ≤))).Œ± ‚•§ (œÄ.obj Œ≤).Œ± :=
  œÄ.map (‚ü®_, continuous_snd‚ü©)

def pi_proj : (œÄ.obj (Top.of (Œ± √ó Œ≤))).Œ± ‚•§ (œÄ.obj Œ±).Œ± √ó (œÄ.obj Œ≤).Œ± :=
  pi_proj_left.prod' pi_proj_right

@[simps]
def prod_to_pi : (œÄ.obj Œ±).Œ± √ó (œÄ.obj Œ≤).Œ± ‚•§ (œÄ.obj (Top.of (Œ± √ó Œ≤))).Œ± :=
{ obj := Œª p, p,
  map := Œª X Y (p : X ‚ü∂ Y), path.homotopic.prod.quotient p.1 p.2,
  map_id' := Œª x, path.homotopic.id_prod.quotient x.1 x.2,
  map_comp' := Œª x y z f g, path.homotopic.hcomp_comm_prod f.1 f.2 g.1 g.2 }

section test
variables {x y : (œÄ.obj (Top.of (Œ± √ó Œ≤))).Œ±} (f : x ‚ü∂ y)
@[simp] lemma def_pi_proj_left  :
  pi_proj_left.map f = path.homotopic.proj.left.quotient f := rfl

@[simp] lemma def_pi_proj_right :
  pi_proj_right.map f = path.homotopic.proj.right.quotient f := rfl

@[simp] lemma def_pi_proj_to_left :
  (pi_proj.map f).1 = pi_proj_left.map f := rfl

@[simp] lemma def_pi_proj_to_right :
  (pi_proj.map f).2 = pi_proj_right.map f := rfl

@[simp] lemma def_pi_proj_obj : pi_proj.obj x = x := by { ext; refl, }

end test

theorem iso‚ÇÉ : pi_proj ‚ãô prod_to_pi = ùü≠ _ :=
begin
  apply category_theory.functor.hext, { simp, },
  intros x y f,
  simp only [category_theory.functor.id_map,
    def_pi_proj_left,
    def_pi_proj_to_left,
    category_theory.functor.comp_map,
    def_pi_proj_to_right,
    prod_to_pi_map,
    def_pi_proj_right],
  convert heq_iff_eq.mpr (path.homotopic.prod_proj.quotient' f);
   simp,
end

theorem iso‚ÇÑ : prod_to_pi ‚ãô pi_proj = ùü≠ _ :=
begin
  apply category_theory.functor.hext, { simp, },
  intros x y f,
  simp [prod.ext_iff],
end

end

end
