import category_theory.category.Groupoid
import category_theory.groupoid
import topology.category.Top.basic
import topology.homotopy.basic
import topology.homotopy.fundamental_groupoid
import topology.constructions
import category_theory.functor
import groupoid_products
import path_homotopy_products

noncomputable theory

/-
 - Given a family of topological spaces `X` indexed by `I`,
   we show that œÄ (Œ†·µ¢ X·µ¢) = Œ†·µ¢ (œÄ X·µ¢)
 - This isomorphism is given by two homomorphisms (note that
    homomorphisms between groupoids are functors):
    - `pi_prod_X_to_prod_pi_X` which is a map œÄ (Œ†·µ¢ X·µ¢) ‚•§ Œ†·µ¢ (œÄ X·µ¢)
    - `prod_pi_X_to_pi_prod_X` which is a map Œ†·µ¢ (œÄ X·µ¢) ‚•§ œÄ (Œ†·µ¢ X·µ¢)
 - We prove the theorems `iso‚ÇÅ` and `iso‚ÇÇ` which show that these
   really are inverses of each others.
 - TODO: It should also be straightforward to show that
         pi_prod_X_to_prod_pi_X preserves projections
         i.e. a projection proj·µ¢ = Œ†·µ¢ X·µ¢ ‚Üí X·µ¢
         maps under œÄ to the corresponding ith projection
         Œ†·µ¢ œÄX·µ¢ ‚Üí œÄX·µ¢. This should be mostly just 
         unrolling definitions and using `simp`
 -/

section
abbreviation œÄ := fundamental_groupoid.fundamental_groupoid_functor

parameters {I : Type*} (X : I ‚Üí Top)


def pi_prod_X_to_prod_pi_X : (œÄ.obj (Top.of (Œ† i, X i))).Œ± 
  ‚•§ Œ† i, (œÄ.obj (X i)).Œ± :=
{ obj := Œª g, g,
  map := Œª v‚ÇÅ v‚ÇÇ p, Œª i, path.homotopic.path_proj.quotient i p,
  map_id' := by { intro x, ext i, exact path.homotopic.proj_id_is_id.quotient i x, },
  map_comp' :=
  begin
    intros x y z f g,
    ext i,
    exact path.homotopic.homproj_commutes_with_comp i f g,
  end }


def prod_pi_X_to_pi_prod_X : (Œ† i : I, (œÄ.obj (X i)).Œ±)
        ‚•§ (œÄ.obj (Top.of (Œ† i, X i))).Œ± := 
{ obj := Œª g, g,
  map := Œª v‚ÇÅ v‚ÇÇ p, path.homotopic.path_prod.quotient p,
  map_id' := path.homotopic.id_product_is_id.quotient,
  map_comp' :=
  begin
    intros x y z f g,
    exact (path.homotopic.hompath_trans_commutes_with_product f g).symm,
  end }

@[simp]
lemma def_pi_prod_X_to_prod_pi_X {x y : (œÄ.obj (Top.of (Œ† i, X i))).Œ±} {f : x ‚ü∂ y} 
  : pi_prod_X_to_prod_pi_X.map f = Œª i : I, path.homotopic.path_proj.quotient i f := rfl

@[simp]
lemma def_prod_pi_X_to_pi_prod_X {x y : Œ† i : I, (œÄ.obj (X i)).Œ±}
           {f : x ‚ü∂ y} : prod_pi_X_to_pi_prod_X.map f = path.homotopic.path_prod.quotient f := rfl 

lemma iso‚ÇÅ : pi_prod_X_to_prod_pi_X ‚ãô prod_pi_X_to_pi_prod_X = ùü≠ _ :=
begin
  apply category_theory.functor.ext; intros,
  { simp, }, { refl, },
end

lemma iso‚ÇÇ : prod_pi_X_to_pi_prod_X ‚ãô pi_prod_X_to_prod_pi_X = ùü≠ _ :=
begin
  apply category_theory.functor.ext; intros,
  { simp, }, { refl, },
end


end

