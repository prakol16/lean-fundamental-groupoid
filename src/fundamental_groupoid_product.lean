
import topology.homotopy.basic
import topology.constructions
import topology.homotopy.path
import category_theory.groupoid
import groupoid_products
import topology.homotopy.fundamental_groupoid
import topology.homotopy.product

noncomputable theory

namespace fundamental_groupoid


private abbreviation œÄ := fundamental_groupoid_functor
universes u

section pi

variables {I : Type u} {X : I ‚Üí Top.{u}}

/--
The projection map Œ† i, X i ‚Üí X i induces a map œÄ(Œ† i, X i) ‚ü∂ œÄ(X i).
-/
def proj (i : I) : (œÄ.obj (Top.of (Œ† i, X i))).Œ± ‚•§ (œÄ.obj (X i)).Œ± := œÄ.map ‚ü®_, continuous_apply i‚ü©

/-- The projection map is precisely path.homotopic.proj interpreted as a functor -/
@[simp] lemma proj_map (i : I) (x‚ÇÄ x‚ÇÅ : (œÄ.obj (Top.of (Œ† i, X i))).Œ±) (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) :
  (proj i).map p = (@path.homotopic.proj _ _ _ _ _ i p) := rfl

/--
The map taking the pi product of a family of fundamental groupoids to the fundamental
groupoid of the pi product. This is actually an isomorphism (see `pi_fgrpd_iso_fgrpd_pi`)
-/
@[simps]
def pi_fgrpd_to_fgrpd_pi :
  (Œ† i, (œÄ.obj (X i)).Œ±) ‚•§ (œÄ.obj (Top.of (Œ† i, X i))).Œ± :=
{ obj := Œª g, g,
  map := Œª v‚ÇÅ v‚ÇÇ p, path.homotopic.pi p,
  map_id' :=
  begin
    intro x,
    change path.homotopic.pi (Œª i, ùüô (x i)) = _,
    simp only [id_eq_path_refl, path.homotopic.pi_lift],
    refl,
  end,
  map_comp' := Œª x y z f g, (path.homotopic.comp_pi_eq_pi_comp f g).symm, }

/--
Shows `pi_fgrpd_to_fgrpd_pi` is an isomorphism, whose inverse is precisely the pi product
of the induced projections. This shows that `fundamental_groupoid_functor` preserves products.
-/
@[simps]
def pi_fgrpd_iso_fgrpd_pi :
  category_theory.Groupoid.of (Œ† i : I, (œÄ.obj (X i)).Œ±) ‚âÖ (œÄ.obj (Top.of (Œ† i, X i))) :=
{ hom := pi_fgrpd_to_fgrpd_pi,
  inv := category_theory.functor.pi' proj,
  hom_inv_id' :=
  begin
    change pi_fgrpd_to_fgrpd_pi ‚ãô (category_theory.functor.pi' proj) = ùü≠ _,
    apply category_theory.functor.ext; intros,
    { ext, simp, }, { refl, },
  end,
  inv_hom_id' :=
  begin
    change (category_theory.functor.pi' proj) ‚ãô pi_fgrpd_to_fgrpd_pi = ùü≠ _,
    apply category_theory.functor.ext; intros,
    { suffices : path.homotopic.pi ((category_theory.functor.pi' proj).map f) = f, { simpa, },
      change (category_theory.functor.pi' proj).map f
        with Œª i, (category_theory.functor.pi' proj).map f i,
      simp, }, { refl, }
  end }

end pi

section prod

variables {A B : Top.{u}}

/-- The induced map of the left projection map X √ó Y ‚Üí X -/
def proj_left : (œÄ.obj (Top.of (A √ó B))).Œ± ‚•§ (œÄ.obj A).Œ± := œÄ.map ‚ü®_, continuous_fst‚ü©

/-- The induced map of the right projection map X √ó Y ‚Üí Y -/
def proj_right : (œÄ.obj (Top.of (A √ó B))).Œ± ‚•§ (œÄ.obj B).Œ± := œÄ.map ‚ü®_, continuous_snd‚ü©

@[simp] lemma proj_left_map (x‚ÇÄ x‚ÇÅ : (œÄ.obj (Top.of (A √ó B))).Œ±) (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) :
  proj_left.map p = path.homotopic.proj_left p := rfl

@[simp] lemma proj_right_map (x‚ÇÄ x‚ÇÅ : (œÄ.obj (Top.of (A √ó B))).Œ±) (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) :
  proj_right.map p = path.homotopic.proj_right p := rfl


/--
The map taking the product of two fundamental groupoids to the fundamental groupoid of the product
of the two topological spaces. This is in fact an isomorphism (see `prod_fgrpd_iso_fgrpd_prod`).
-/
@[simps]
def prod_fgrpd_to_fgrpd_prod : (œÄ.obj A).Œ± √ó (œÄ.obj B).Œ± ‚•§ (œÄ.obj (Top.of (A √ó B))).Œ± :=
{ obj := Œª g, g,
  map := Œª x y p, match x, y, p with
    | (x‚ÇÄ, x‚ÇÅ), (y‚ÇÄ, y‚ÇÅ), (p‚ÇÄ, p‚ÇÅ) := path.homotopic.prod p‚ÇÄ p‚ÇÅ
  end,
  map_id' :=
  begin
    rintro ‚ü®x‚ÇÄ, x‚ÇÅ‚ü©,
    simp only [category_theory.prod_id, id_eq_path_refl],
    unfold_aux, rw path.homotopic.prod_lift, refl,
  end,
  map_comp' := Œª x y z f g, match x, y, z, f, g with
    | (x‚ÇÄ, x‚ÇÅ), (y‚ÇÄ, y‚ÇÅ), (z‚ÇÄ, z‚ÇÅ), (f‚ÇÄ, f‚ÇÅ), (g‚ÇÄ, g‚ÇÅ) :=
    (path.homotopic.comp_prod_eq_prod_comp f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ).symm
  end }

/--
Shows `prod_fgrpd_to_fgrpd_prod` is an isomorphism, whose inverse is precisely the product
of the induced left and right projections.
-/
@[simps]
def prod_fgrpd_iso_fgrpd_prod :
  category_theory.Groupoid.of ((œÄ.obj A).Œ± √ó (œÄ.obj B).Œ±) ‚âÖ (œÄ.obj (Top.of (A √ó B))) :=
{ hom := prod_fgrpd_to_fgrpd_prod,
  inv := proj_left.prod' proj_right,
  hom_inv_id' :=
  begin
    change prod_fgrpd_to_fgrpd_prod ‚ãô (proj_left.prod' proj_right) = ùü≠ _,
    apply category_theory.functor.hext, { intros, ext; simp; refl, },
    rintros ‚ü®x‚ÇÄ, x‚ÇÅ‚ü© ‚ü®y‚ÇÄ, y‚ÇÅ‚ü© ‚ü®f‚ÇÄ, f‚ÇÅ‚ü©,
    have := and.intro (path.homotopic.proj_left_prod f‚ÇÄ f‚ÇÅ) (path.homotopic.proj_right_prod f‚ÇÄ f‚ÇÅ),
    simpa,
  end,
  inv_hom_id' :=
  begin
    change (proj_left.prod' proj_right) ‚ãô prod_fgrpd_to_fgrpd_prod = ùü≠ _,
    apply category_theory.functor.hext, { intros, ext; simp; refl, },
    rintros ‚ü®x‚ÇÄ, x‚ÇÅ‚ü© ‚ü®y‚ÇÄ, y‚ÇÅ‚ü© f,
    have := path.homotopic.prod_proj_left_proj_right f,
    simpa,
  end }

end prod

end fundamental_groupoid