import category_theory.category.Groupoid
import category_theory.groupoid
import topology.category.Top.basic
import topology.homotopy.basic
import topology.homotopy.fundamental_groupoid
import topology.constructions
import category_theory.functor
import groupoid_products
import path_homotopy_products

noncomputable theory

/-
 - Given a family of topological spaces `X` indexed by `I`,
   we show that œÄ (Œ†·µ¢ X·µ¢) = Œ†·µ¢ (œÄ X·µ¢)
 - This isomorphism is given by two homomorphisms (note that
    homomorphisms between groupoids are functors):
    - `pi_prod_X_to_prod_pi_X` which is a map œÄ (Œ†·µ¢ X·µ¢) ‚•§ Œ†·µ¢ (œÄ X·µ¢)
    - `prod_pi_X_to_pi_prod_X` which is a map Œ†·µ¢ (œÄ X·µ¢) ‚•§ œÄ (Œ†·µ¢ X·µ¢)
 - We prove the theorems `iso‚ÇÅ` and `iso‚ÇÇ` which show that these
   really are inverses of each others.
 - TODO: It should also be straightforward to show that
         pi_prod_X_to_prod_pi_X preserves projections
         i.e. a projection proj·µ¢ = Œ†·µ¢ X·µ¢ ‚Üí X·µ¢
         maps under œÄ to the corresponding ith projection
         Œ†·µ¢ œÄX·µ¢ ‚Üí œÄX·µ¢. This should be mostly just 
         unrolling definitions and using `simp`
 -/

namespace category_theory.functor
section
open category_theory

universes w v u

@[simps]
def pi' {I : Type w} {X : I ‚Üí Type u} [‚àÄi : I, category.{v} (X i)]
        {A : Type u} [category.{v} A] (f : Œ† i, A ‚•§ X i) :
        A ‚•§ Œ† i, X i := 
{ obj := Œª a i, (f i).obj a,
  map := Œª a‚ÇÅ a‚ÇÇ h i, (f i).map h, }

@[simps]
def diag {I : Type w} {A : Type u} [category.{v} A] : A ‚•§ (Œ† i : I, A) := pi' (Œª i, ùü≠ A)

lemma pi'_diag_pi 
        {I : Type w} {X : I ‚Üí Type u} [‚àÄi : I, category.{v} (X i)]
        {A : Type u} [category.{v} A] {f : Œ† i, A ‚•§ X i} :
        pi' f = diag ‚ãô functor.pi f := by obviously

end
end category_theory.functor


section
universe u
abbreviation œÄ := fundamental_groupoid.fundamental_groupoid_functor

parameters {I : Type u} (X : I ‚Üí Top.{u})

def pi_prod_X_to_prod_pi_X_i (i : I) : (œÄ.obj (Top.of (Œ† i, X i))).Œ± 
  ‚•§ (œÄ.obj (X i)).Œ± :=
  œÄ.map (to_bundled (continuous_apply i))


def pi_prod_X_to_prod_pi_X : (œÄ.obj (Top.of (Œ† i, X i))).Œ± 
  ‚•§ Œ† i, (œÄ.obj (X i)).Œ± := (category_theory.functor.pi' pi_prod_X_to_prod_pi_X_i)

def prod_pi_X_to_pi_prod_X : (Œ† i : I, (œÄ.obj (X i)).Œ±)
        ‚•§ (œÄ.obj (Top.of (Œ† i, X i))).Œ± := 
{ obj := Œª g, g,
  map := Œª v‚ÇÅ v‚ÇÇ p, path.homotopic.path_prod.quotient p,
  map_id' := path.homotopic.id_product_is_id.quotient,
  map_comp' := Œª x y z f g, (path.homotopic.hompath_trans_commutes_with_product f g).symm }

@[simp]
lemma def_pi_prod_X_to_prod_pi_X {x y : (œÄ.obj (Top.of (Œ† i, X i))).Œ±} {f : x ‚ü∂ y} 
  : pi_prod_X_to_prod_pi_X.map f = Œª i : I, path.homotopic.path_proj.quotient i f := rfl

@[simp]
lemma def_prod_pi_X_to_pi_prod_X {x y : Œ† i : I, (œÄ.obj (X i)).Œ±}
           {f : x ‚ü∂ y} : prod_pi_X_to_pi_prod_X.map f = path.homotopic.path_prod.quotient f := rfl 

theorem iso‚ÇÅ : pi_prod_X_to_prod_pi_X ‚ãô prod_pi_X_to_pi_prod_X = ùü≠ _ :=
begin
  apply category_theory.functor.ext; intros,
  { simp, }, { refl, },
end

theorem iso‚ÇÇ : prod_pi_X_to_pi_prod_X ‚ãô pi_prod_X_to_prod_pi_X = ùü≠ _ :=
begin
  apply category_theory.functor.ext; intros,
  { simp, }, { refl, },
end

section
parameter (i : I)

def proj_i : C(Top.of (Œ† i, X i), X i) := 
  to_bundled (continuous_apply i) 

def proj_i' : (Œ† i : I, (œÄ.obj (X i)).Œ±) ‚•§ (œÄ.obj (X i)).Œ± :=
  category_theory.pi.eval _ i

theorem preserves_products : œÄ.map proj_i = pi_prod_X_to_prod_pi_X ‚ãô proj_i' := by obviously
end
end
