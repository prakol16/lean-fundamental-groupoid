import fundamental_groupoid_product
import topology.homotopy.equiv
import category_theory.equivalence

noncomputable theory

namespace continuous_map.homotopy

variables {X : Type*} {Y : Type*} [topological_space X] [topological_space Y] {f g : C(X, Y)}
          (H : continuous_map.homotopy f g)

def to_path (x : X) : path (f x) (g x) :=
{ to_fun := Œª t, H (t, x),
  source' := H.apply_zero x,
  target' := H.apply_one x, }

end continuous_map.homotopy

namespace category_theory.groupoid
open category_theory
section
universe u
variables {G H I : Groupoid.{u u}} (f : G.Œ± ‚•§ H.Œ±) (g : H.Œ± ‚•§ I.Œ±)


lemma grpd_id_eq : (ùü≠ G.Œ±) = (ùüô G) := rfl

@[reducible]
def func_to_hom : G ‚ü∂ H := f

lemma grpd_comp_eq : f ‚ãô g = (func_to_hom f : G ‚ü∂ H) ‚â´ (g : H ‚ü∂ I) := rfl

end
end category_theory.groupoid

namespace continuous_map
universe u
variables {G : Top.{u}}

lemma top_id_eq : (continuous_map.id : C(G, G)) = (ùüô G) := rfl

end continuous_map

namespace fundamental_groupoid

local attribute [reducible] fundamental_groupoid

/-- Help the typechecker by converting point in groupoid back to point in Top -/
@[reducible]
def to_top {X : Top} (x : (fundamental_groupoid_functor.obj X).Œ±) : X := x

/-- Help the typechecker by converting point in Top to a point in the fundamental groupoid -/
@[reducible]
def from_top {X : Top} (x : X) : (fundamental_groupoid_functor.obj X).Œ± := x

/-- Help the typechecker by converting a path in groupoid back to path.homotopic.quotient -/
@[reducible]
def to_path {X : Top} {x‚ÇÄ x‚ÇÅ : (fundamental_groupoid_functor.obj X).Œ±} (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) :
  path.homotopic.quotient x‚ÇÄ x‚ÇÅ := p

/-- Help the typechecker by convering a path.homotopic.quotient to an arrow in the
    fundamental groupoid -/
@[reducible]
def from_path {X : Top} {x‚ÇÄ x‚ÇÅ : X} (p : path.homotopic.quotient x‚ÇÄ x‚ÇÅ) : (x‚ÇÄ ‚ü∂ x‚ÇÅ) := p

lemma map_map_eq {X Y : Top} {x‚ÇÄ x‚ÇÅ : X} (f : C(X, Y)) (p : path.homotopic.quotient x‚ÇÄ x‚ÇÅ) :
  (fundamental_groupoid_functor.map f).map p = p.map_fn f := rfl
 

end fundamental_groupoid


section
open fundamental_groupoid
private abbreviation œÄ := fundamental_groupoid_functor
universes u v
open_locale unit_interval
local attribute [instance] path.homotopic.setoid

section htop_maps_induce_iso_funcs

section casts

lemma path_cast_left {X : Top} {x‚ÇÄ x‚ÇÅ x‚ÇÄ' : X} (p : path x‚ÇÄ x‚ÇÅ) (hx‚ÇÄ : x‚ÇÄ = x‚ÇÄ') :
  (category_theory.eq_to_hom hx‚ÇÄ.symm : (from_top x‚ÇÄ') ‚ü∂ x‚ÇÄ) ‚â´ ‚ü¶p‚üß = ‚ü¶p.cast hx‚ÇÄ.symm rfl‚üß :=
by { subst hx‚ÇÄ, simp only [category_theory.category.id_comp, category_theory.eq_to_hom_refl],
  congr, ext, simp, }

lemma path_cast_right {X : Top} {x‚ÇÄ x‚ÇÅ x‚ÇÅ' : X} (p : path x‚ÇÄ x‚ÇÅ) (hx‚ÇÅ : x‚ÇÅ = x‚ÇÅ') :
  ((‚ü¶p‚üß ‚â´ (category_theory.eq_to_hom hx‚ÇÅ : (from_top x‚ÇÅ) ‚ü∂ x‚ÇÅ')) : from_top x‚ÇÄ ‚ü∂ x‚ÇÅ') = ‚ü¶p.cast rfl hx‚ÇÅ.symm‚üß :=
by { subst hx‚ÇÅ, simp only [category_theory.category.comp_id, category_theory.eq_to_hom_refl],
  congr, ext, simp, }

parameters {X‚ÇÅ X‚ÇÇ Y : Top.{u}} (f : C(X‚ÇÅ, Y)) (g : C(X‚ÇÇ, Y)) 
  {x‚ÇÄ x‚ÇÅ : X‚ÇÅ} {x‚ÇÇ x‚ÇÉ : X‚ÇÇ} (p : path x‚ÇÄ x‚ÇÅ) (q : path x‚ÇÇ x‚ÇÉ) (hfg : ‚àÄ t : I, f (p t) = g (q t))

include hfg
private lemma start_path : f x‚ÇÄ = g x‚ÇÇ := by { convert hfg 0; simp only [path.source], }
private lemma end_path : f x‚ÇÅ = g x‚ÇÉ := by { convert hfg 1; simp only [path.target], }

lemma function_image_of_path  :
  (œÄ.map f).map ‚ü¶p‚üß = category_theory.eq_to_hom start_path ‚â´ (œÄ.map g).map ‚ü¶q‚üß ‚â´ category_theory.eq_to_hom end_path.symm :=
begin
  simp only [map_map_eq, ‚Üê path.homotopic.map_lift, path_cast_right],
  rw path_cast_left _ (start_path f g p q hfg).symm,
  congr, ext, simp only [path.map_coe, hfg, function.comp_app, path.cast_coe],
end

end casts

parameters {X : Top.{u}} {Y : Top.{u}} {f g : C(X, Y)} (H : continuous_map.homotopy f g)
variables {x‚ÇÄ x‚ÇÅ : X} (p : path.homotopic.quotient x‚ÇÄ x‚ÇÅ)

def straight_path : path (0 : I) (1 : I) := { to_fun := id, source' := rfl, target' := rfl }

def diagonal_path : from_top (H (0, x‚ÇÄ)) ‚ü∂ from_top (H (1, x‚ÇÅ)) :=
(path.homotopic.prod ‚ü¶straight_path‚üß p).map_fn H.to_continuous_map

def diagonal_path' : from_top (f x‚ÇÄ) ‚ü∂ from_top (g x‚ÇÅ) :=
(category_theory.eq_to_hom (H.apply_zero x‚ÇÄ).symm) ‚â´ 
  (diagonal_path p) ‚â´ 
  (category_theory.eq_to_hom (H.apply_one x‚ÇÅ))

abbreviation H_map : C(Top.of (I √ó X), Y) := H.to_continuous_map

lemma up_is_f : (œÄ.map f).map p = (category_theory.eq_to_hom (H.apply_zero x‚ÇÄ).symm) 
  ‚â´ ((œÄ.map H_map).map (path.homotopic.prod ‚ü¶path.refl (0 : I)‚üß p)) 
  ‚â´ (category_theory.eq_to_hom (H.apply_zero x‚ÇÅ)) :=
begin
  apply quotient.induction_on p,
  intro p',
  rw path.homotopic.prod_lift,
  apply function_image_of_path f H_map,
  simp,
end

lemma down_is_g : (œÄ.map g).map p = (category_theory.eq_to_hom (H.apply_one x‚ÇÄ).symm)
  ‚â´ ((œÄ.map H_map).map (path.homotopic.prod ‚ü¶path.refl (1 : I)‚üß p))
  ‚â´ (category_theory.eq_to_hom (H.apply_one x‚ÇÅ)) :=
begin
  apply quotient.induction_on p,
  intro p',
  rw path.homotopic.prod_lift,
  apply function_image_of_path g H_map,
  simp,
end

lemma H_to_path (x : X) : ‚ü¶H.to_path x‚üß =
  (category_theory.eq_to_hom (H.apply_zero x).symm : from_top (f x) ‚ü∂ H (0, x)) ‚â´
  (œÄ.map H_map).map (path.homotopic.prod ‚ü¶straight_path‚üß ‚ü¶path.refl x‚üß) ‚â´
  (category_theory.eq_to_hom (H.apply_one x)) :=
by { rw path.homotopic.prod_lift, simp only [map_map_eq, ‚Üê path.homotopic.map_lift, path_cast_left, path_cast_right], refl, }

lemma eq_diag :
  (œÄ.map f).map p ‚â´ ‚ü¶H.to_path x‚ÇÅ‚üß = diagonal_path' p ‚àß
  (‚ü¶H.to_path x‚ÇÄ‚üß ‚â´ (œÄ.map g).map p : from_top (f x‚ÇÄ) ‚ü∂ from_top (g x‚ÇÅ)) = diagonal_path' p :=
begin
  rw [up_is_f, down_is_g, H_to_path, H_to_path],
  split;
  simp only [category_theory.category.id_comp, category_theory.eq_to_hom_refl,
    category_theory.category.assoc, category_theory.eq_to_hom_trans_assoc,
    ‚Üê category_theory.functor.map_comp_assoc];
  simp only [comp_eq, path.homotopic.comp_prod_eq_prod_comp];
  simp [‚Üê comp_eq, ‚Üê id_eq_path_refl]; refl,
end

def homotopic_maps_equivalent : category_theory.nat_trans (œÄ.map f) (œÄ.map g) :=
{ app := Œª x, ‚ü¶H.to_path x‚üß,
  naturality' := by { intros x y p, rw [(eq_diag p).1, (eq_diag p).2],  } }

include H
lemma homotopic_maps_isomorphic : (œÄ.map f) ‚âÖ (œÄ.map g) :=
begin
  refine category_theory.as_iso (_ : (œÄ.map f) ‚ü∂ (œÄ.map g)),
  { exact homotopic_maps_equivalent, },
  apply category_theory.nat_iso.is_iso_of_is_iso_app,
end

end htop_maps_induce_iso_funcs

section

open_locale continuous_map
variables (X Y : Top.{u})


theorem equivalent_fundamental_groupoids (hequiv : X ‚âÉ‚Çï Y) : (œÄ.obj X).Œ± ‚âå (œÄ.obj Y).Œ± :=
begin
  apply category_theory.equivalence.mk (œÄ.map hequiv.to_fun : (œÄ.obj X) ‚ü∂ (œÄ.obj Y)) (œÄ.map hequiv.inv_fun);
  simp only [category_theory.groupoid.grpd_comp_eq, ‚Üê category_theory.functor.map_comp, category_theory.groupoid.grpd_id_eq],
  { convert (nonempty.map homotopic_maps_isomorphic hequiv.left_inv).some.symm, simp [continuous_map.top_id_eq], },
  { convert (nonempty.map homotopic_maps_isomorphic hequiv.right_inv).some, simp [continuous_map.top_id_eq], }
end

end
end