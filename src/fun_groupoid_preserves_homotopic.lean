import category_theory.category.Groupoid
import category_theory.groupoid
import topology.category.Top.basic
import topology.homotopy.basic
import topology.homotopy.fundamental_groupoid
import topology.constructions
import category_theory.functor
import category_theory.natural_isomorphism
import groupoid_products
import topology.path_connected
import fundamental_groupoid_product
import category_theory.currying
import category_theory.eq_to_hom
import category_theory.isomorphism
import groupoid_properties

noncomputable theory

section
variables {X : Type*} {Y : Type*} [topological_space X] [topological_space Y]
variables {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ : X}

local attribute [instance] path.homotopic.setoid

def map_fn (P‚ÇÄ : path.homotopic.quotient x‚ÇÄ x‚ÇÅ) (f : C(X, Y)) :
                  path.homotopic.quotient (f x‚ÇÄ) (f x‚ÇÅ) := quotient.map
      (Œª (q : path x‚ÇÄ x‚ÇÅ), q.map f.continuous) (Œª p‚ÇÄ p‚ÇÅ h, path.homotopic.map h f) P‚ÇÄ

lemma map_lift (P‚ÇÄ : path x‚ÇÄ x‚ÇÅ) (f : C(X, Y)) :
  ‚ü¶P‚ÇÄ.map f.continuous‚üß = map_fn ‚ü¶P‚ÇÄ‚üß f := rfl

def comp (P‚ÇÄ : path.homotopic.quotient x‚ÇÄ x‚ÇÅ) (P‚ÇÅ : path.homotopic.quotient x‚ÇÅ x‚ÇÇ) :
                  path.homotopic.quotient x‚ÇÄ x‚ÇÇ :=
                  quotient.map‚ÇÇ path.trans
                  (Œª (p‚ÇÄ : path x‚ÇÄ x‚ÇÅ) p‚ÇÅ hp (q‚ÇÄ : path x‚ÇÅ x‚ÇÇ) q‚ÇÅ hq, (path.homotopic.hcomp hp hq)) P‚ÇÄ P‚ÇÅ

lemma comp_lift (P‚ÇÄ : path x‚ÇÄ x‚ÇÅ) (P‚ÇÅ : path x‚ÇÅ x‚ÇÇ) : ‚ü¶P‚ÇÄ.trans P‚ÇÅ‚üß = comp ‚ü¶P‚ÇÄ‚üß ‚ü¶P‚ÇÅ‚üß := rfl


lemma pi_map_def {X Y : Top} (f : C(X, Y)) : (œÄ.map f).map = Œª x y p, map_fn p f := rfl

lemma comp_eq {X : Top} (x y z : fundamental_groupoid X) (p : x ‚ü∂ y) (q : y ‚ü∂ z) :
  p ‚â´ q = comp p q := rfl

def eq_to_path (p : x‚ÇÄ = x‚ÇÅ) : path x‚ÇÄ x‚ÇÅ := by rw p

def path.homotopic.cast (p‚ÇÄ : x‚ÇÄ = x‚ÇÅ) (p‚ÇÅ : x‚ÇÇ = x‚ÇÉ) (P : path.homotopic.quotient x‚ÇÅ x‚ÇÉ) : 
  (path.homotopic.quotient x‚ÇÄ x‚ÇÇ) := by rwa [p‚ÇÄ, p‚ÇÅ]

def path_cast (p‚ÇÄ : x‚ÇÄ = x‚ÇÅ) (p‚ÇÅ : x‚ÇÇ = x‚ÇÉ) (P : path x‚ÇÅ x‚ÇÉ) : path x‚ÇÄ x‚ÇÇ := by rwa [p‚ÇÄ, p‚ÇÅ]

lemma cast_lift (p‚ÇÄ : x‚ÇÄ = x‚ÇÅ) (p‚ÇÅ : x‚ÇÇ = x‚ÇÉ) (P‚ÇÄ : path x‚ÇÅ x‚ÇÉ) : ‚ü¶P‚ÇÄ.cast p‚ÇÄ p‚ÇÅ‚üß = path.homotopic.cast p‚ÇÄ p‚ÇÅ ‚ü¶P‚ÇÄ‚üß := 
by { subst_vars, refl, }

lemma path_heq_cast (p‚ÇÄ : x‚ÇÄ = x‚ÇÅ) (p‚ÇÅ : x‚ÇÇ = x‚ÇÉ) (P : path x‚ÇÅ x‚ÇÉ) : P.cast p‚ÇÄ p‚ÇÅ == P :=
by { subst_vars, refl, }

lemma path.homotopic.heq_cast (p‚ÇÄ : x‚ÇÄ = x‚ÇÅ) (p‚ÇÅ : x‚ÇÇ = x‚ÇÉ) (P : path.homotopic.quotient x‚ÇÅ x‚ÇÉ) : 
path.homotopic.cast p‚ÇÄ p‚ÇÅ P == P := by { subst_vars, refl, }


#check path.cast

end

-- If f g : X ‚Üí Y are maps with f ‚âÉ g, then œÄf ‚âÉ œÄg


section
universe u


def f_to_g {A B : Type u} [category_theory.category A] [category_theory.category B]
            {I : Type u} [category_theory.category I]
            [has_zero I] [has_one I] (i01 : (0 : I) ‚ü∂ 1)
            (F : I √ó A ‚•§ B)
            (f g : A ‚•§ B)
            (F_zero : (category_theory.curry.obj F).obj 0 = f)
            (F_one : (category_theory.curry.obj F).obj 1 = g) :
            category_theory.nat_trans f g :=
{ app :=
begin
  intro x,
  rw [‚Üê F_zero, ‚Üê F_one],
  exact (F.map (i01, ùüô _)),
end,
  naturality' :=
begin
  intros x y h,
  subst F_zero,
  subst F_one,
  simp,
end }


def f_to_g' {A B : Type u} [category_theory.category A] [category_theory.category B]
            {I : Type u} [category_theory.category I]
            [has_zero I] [has_one I] (i01 : (0 : I) ‚ü∂ 1)
            (F : I √ó A ‚•§ B)
            (f g : A ‚•§ B)
            (F_zero : (category_theory.curry.obj F).obj 0 ‚âÖ f)
            (F_one : (category_theory.curry.obj F).obj 1 ‚âÖ g) :
            category_theory.nat_trans f g :=
{ app := Œª x, (F_zero.inv.app x : f.obj x ‚ü∂ F.obj (0, x))
            ‚â´ (F.map (i01, ùüô x) : F.obj (0, x) ‚ü∂ F.obj (1, x))
            ‚â´ (F_one.hom.app x : F.obj (1, x) ‚ü∂ g.obj x),
  naturality' :=
begin
  intros x y p,
  rw [
    ‚Üê (category_theory.nat_iso.naturality_1 F_zero p),
    ‚Üê (category_theory.nat_iso.naturality_1 F_one p)
  ],
  -- cancel_nat_iso_hom_right_assoc is a simp lemma, but for some reason Lean doesn't get it
  have := category_theory.nat_iso.cancel_nat_iso_hom_right_assoc F_one (F.map (ùüô 0, p) : F.obj (0, x) ‚ü∂ F.obj (0, y)) (F.map (i01, ùüô y)) (F.map (i01, ùüô x) : F.obj (0, x) ‚ü∂ F.obj (1, x)) (F.map (ùüô 1, p)),
  simp [this],
end }

end

open_locale unit_interval
section
local attribute [instance] path.homotopic.setoid
universe u
parameters (X Y : Top.{0}) (f g : C(X, Y))
           (F : continuous_map.homotopy f g)

def F_star : (œÄ.obj (Top.of (I √ó X))).Œ± ‚•§ (œÄ.obj Y).Œ± := œÄ.map F.to_continuous_map
def F_star' : (œÄ.obj (Top.of I)).Œ± √ó (œÄ.obj X).Œ± ‚•§ (œÄ.obj Y).Œ± := prod_to_pi ‚ãô F_star

instance : has_zero ((œÄ.obj (Top.of I)).Œ±) := { zero := (0 : I) }
instance : has_one ((œÄ.obj (Top.of I)).Œ±) := { one := (1 : I) }


section test_again

local notation p‚ÇÅ ` ‚¨ù ` p‚ÇÇ := comp p‚ÇÅ p‚ÇÇ
parameters {x‚ÇÄ x‚ÇÅ : X} (h : path.homotopic.quotient x‚ÇÄ x‚ÇÅ)


lemma F_star_apply_zero :
map_fn (@path.homotopic.prod.quotient (Top.of I) X ((0 : I), x‚ÇÄ) ((0 : I), x‚ÇÅ) ‚ü¶path.refl 0‚üß h) F.to_continuous_map 
= path.homotopic.cast (F.apply_zero x‚ÇÄ) (F.apply_zero x‚ÇÅ) (map_fn h f) :=
begin
  apply quotient.induction_on h,
  intro h',
  rw [path.homotopic.prod.quotient_rec, ‚Üê map_lift, ‚Üê map_lift, ‚Üê cast_lift],
  congr,
  ext t,
  unfold path.homotopic.prod, unfold path.refl, unfold continuous_map.prod_mk,
  simp,
end

lemma F_star_apply_one :
map_fn (@path.homotopic.prod.quotient (Top.of I) X ((1 : I), x‚ÇÄ) ((1 : I), x‚ÇÅ) ‚ü¶path.refl 1‚üß h) F.to_continuous_map 
= path.homotopic.cast (F.apply_one x‚ÇÄ) (F.apply_one x‚ÇÅ) (map_fn h g) :=
begin
  apply quotient.induction_on h,
  intro h',
  rw [path.homotopic.prod.quotient_rec, ‚Üê map_lift, ‚Üê map_lift, ‚Üê cast_lift],
  congr,
  ext t,
  unfold path.homotopic.prod, unfold path.refl, unfold continuous_map.prod_mk,
  simp,
end


lemma F_star_apply_zero_heq :
map_fn (@path.homotopic.prod.quotient (Top.of I) X ((0 : I), x‚ÇÄ) ((0 : I), x‚ÇÅ) ‚ü¶path.refl 0‚üß h) F.to_continuous_map
== map_fn h f :=
begin
  rw F_star_apply_zero,
  apply path.homotopic.heq_cast,
end

lemma F_star_apply_one_heq :
map_fn (@path.homotopic.prod.quotient (Top.of I) X ((1 : I), x‚ÇÄ) ((1 : I), x‚ÇÅ) ‚ü¶path.refl 1‚üß h) F.to_continuous_map 
== map_fn h g :=
begin
  rw F_star_apply_one,
  apply path.homotopic.heq_cast,
end

end test_again

def zero_to_one_path : path (0 : I) (1 : I) := 
{ to_fun := Œª t, t,
  source' := rfl,
  target' := rfl }
def zero_to_one : (0 : (œÄ.obj (Top.of I)).Œ±) ‚ü∂ 1 := ‚ü¶zero_to_one_path‚üß

include F
theorem homotopic_maps_equivalent : category_theory.nat_trans (œÄ.map f) (œÄ.map g) :=
begin
  apply f_to_g zero_to_one F_star',
  {
    apply category_theory.functor.hext,
    { exact F.apply_zero, },
    { intros x y h, apply F_star_apply_zero_heq, }
  },
  {
    apply category_theory.functor.hext,
    { exact F.apply_one, },
    { intros, apply F_star_apply_one_heq, } 
  },
end

theorem homotopic_maps_isomorphic : œÄ.map f ‚âÖ œÄ.map g :=
begin
  apply category_theory.as_iso (_ : (œÄ.map f) ‚ü∂ (œÄ.map g)),
  { exact homotopic_maps_equivalent },
  apply category_theory.groupoid.nat_iso_of_groupoid_nat_trans,
end

end
