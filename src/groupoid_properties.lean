import category_theory.full_subcategory
import category_theory.groupoid
import category_theory.functor
import category_theory.endomorphism
import category_theory.is_connected

namespace category_theory.groupoid
section
open category_theory


@[simp] lemma comp_inv_x {G : Type*} [category_theory.groupoid G] {x y z : G}
                {f : x ‚ü∂ y} {g : x ‚ü∂ z} : f ‚â´ (inv f) ‚â´ g = g :=
by rw [‚Üê category.assoc, comp_inv, category.id_comp]

@[simp] lemma inv_comp_x {G : Type*} [category_theory.groupoid G] {x y z : G}
                {f : y ‚ü∂ x} {g : x ‚ü∂ z} : (inv f) ‚â´ f ‚â´ g = g :=
by rw [‚Üê category.assoc, inv_comp, category.id_comp]

end

section
lemma iso_of_groupoid_connected {G : Type*} [category_theory.groupoid G]
  (conn : category_theory.is_preconnected G) (x y : G) : nonempty (x ‚âÖ y) :=
begin
  refine nonempty.map (category_theory.groupoid.iso_equiv_hom x y).inv_fun _,
  let x_path_component := {z : G | nonempty (x ‚ü∂ z)},
  change y ‚àà x_path_component,
  refine category_theory.induct_on_objects x_path_component (_ : x ‚àà x_path_component) _ y,
  { exact nonempty.intro (ùüô x), },
  { intros a b fab,
    split,
    { intro ha,
      exact nonempty.map (Œª fxa : x ‚ü∂ a, fxa ‚â´ fab) ha, },
    { intro hb,
      exact nonempty.map (Œª fxb : x ‚ü∂ b, fxb ‚â´ (inv fab)) hb, }
  }
end

end

section
variables {g : Type*} [category_theory.groupoid g]
            (x‚ÇÅ : g) (x‚ÇÇ : g)

@[reducible]
def to_group (x : g) := category_theory.End x

lemma to_group_iso (f : x‚ÇÅ ‚ü∂ x‚ÇÇ) : to_group x‚ÇÅ ‚âÉ* to_group x‚ÇÇ :=
{ to_fun := Œª a, (inv f) ‚â´ a ‚â´ f,
  inv_fun := Œª a, f ‚â´ a ‚â´ (inv f),
  left_inv := by { intro, simp, },
  right_inv := by { intro, simp, },
  map_mul' := by simp, }

lemma to_group_iso_connected (conn : category_theory.is_preconnected g) :
  nonempty (to_group x‚ÇÅ ‚âÉ* to_group x‚ÇÇ) :=
begin
  refine nonempty.map (to_group_iso x‚ÇÅ x‚ÇÇ) _,
  refine nonempty.map (category_theory.groupoid.iso_equiv_hom x‚ÇÅ x‚ÇÇ) _,
  exact (iso_of_groupoid_connected conn x‚ÇÅ x‚ÇÇ),
end
end

end category_theory.groupoid